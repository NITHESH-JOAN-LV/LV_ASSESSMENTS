# -*- coding: utf-8 -*-
"""LVADSUSR_170_Anomaly_LAB4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lgzl6rZ-Gg-yq5_phDMAfE66yoW0HDZq
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from scipy.stats import zscore
from sklearn.ensemble import IsolationForest
from sklearn.cluster import DBSCAN
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error, explained_variance_score, r2_score

import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv('/content/anomaly_train.csv')

df.isnull().sum()

df.duplicated().sum()

df.head(3)

for col in df.select_dtypes([int,float]).columns:
    plt.figure(figsize=(8, 4))
    sns.histplot(df[col], kde=True)
    plt.title(f'Distribution of {col}')
    plt.show()

from scipy import stats
col_list=df.columns
for col in col_list[2:]:
    if df[col].dtype in ['float64', 'int64']:
        plt.figure(figsize=(8, 4))
        sns.boxplot(x=df[col])
        plt.title(f'Boxplot of {col}')
        plt.show()
        z_scores = np.abs(stats.zscore(df[col]))
        threshold = 3
        outliers = np.where(z_scores > threshold)[0]
        print(f'Outliers in {col}: {outliers}')
        df[col].iloc[outliers] = df[col].mean()

corr_mat=df

df.head(3)

le = LabelEncoder()

df['Type'] = le.fit_transform(df['Type'])
df['Location']=le.fit_transform(df['Location'])

corr_mat=df.drop(['TransactionID','User'],axis=1).corr()

sns.heatmap(corr_mat,annot=True,fmt='.2f')
plt.show()

features = ["Amount", "Type", "Time","Location"]

X = df[features]

std = StandardScaler()
X = std.fit_transform(X)

model = IsolationForest(n_estimators=100, contamination=0.1)
model.fit(X)

y_pred = model.predict(X)

df["anomaly_score"] = model.decision_function(X)

anomalies = df.loc[df["anomaly_score"] < 0]

plt.scatter(df["Type"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["Type"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Type")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

plt.scatter(df["Amount"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["Amount"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Amount")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

plt.scatter(df["Time"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["Time"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Time")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

plt.scatter(df["Location"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["Location"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Location")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

def check(num):
  if num<0:
    return 'Yes'
  else:
    return 'No'


df['is_anomaly']=df['anomaly_score'].apply(check)

df.head()

df['is_anomaly'].value_counts()

