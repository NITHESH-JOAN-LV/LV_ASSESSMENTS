# -*- coding: utf-8 -*-
"""LVADSUSR_170_Classification_LAB2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FHpTzTuxxGB5HDhT5ia3W9aIpUZENSwD
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from scipy.stats import zscore
from sklearn.ensemble import IsolationForest
from sklearn.cluster import DBSCAN
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error, explained_variance_score, r2_score

import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv('/content/penguins_classification.csv')

df.head(3)

df.shape

df.isnull().sum()

df.info()

plt.hist(df['bill_depth_mm'])
plt.xlabel('bill depth')
plt.ylabel('Frequency')
plt.show()

df['bill_depth_mm'].fillna(df['bill_depth_mm'].mean(),inplace=True)

df.isnull().sum()

df.duplicated().sum()

df.describe()

df.head(3)

df['species'].value_counts()

le = LabelEncoder()

df['species'] = le.fit_transform(df['species'])
df['island']=le.fit_transform(df['island'])

# 0 indicates species Adelie and 1 indicates species Gentoo

corr_mat=df.corr()

sns.heatmap(corr_mat,annot=True,fmt='.2f')
plt.show()

col_list=df.columns
for col in col_list[2:]:
    plt.figure(figsize=(8, 4))
    sns.histplot(df[col], kde=True)
    plt.title(f'Distribution of {col}')
    plt.show()

numerical=df.select_dtypes([int,float])
for i in range(len(numerical.columns)):
  for j in range(i+1,len(numerical.columns)):
    plt.scatter(df[numerical.columns[i]],df[numerical.columns[j]])
    plt.title(f'Scatter plot of {numerical.columns[i]} and {numerical.columns[j]}')
    plt.show()

from scipy import stats
col_list=df.columns
for col in col_list[2:]:
    if df[col].dtype in ['float64', 'int64']:
        plt.figure(figsize=(8, 4))
        sns.boxplot(x=df[col])
        plt.title(f'Boxplot of {col}')
        plt.show()
        z_scores = np.abs(stats.zscore(df[col]))
        threshold = 3
        outliers = np.where(z_scores > threshold)[0]
        print(f'Outliers in {col}: {outliers}')
        df[col].iloc[outliers] = df[col].mean()

df.head()

X = df.drop(['species','island','year'],axis=1)
y = df["species"]

std = StandardScaler()
X_std = std.fit_transform(X)

X_train,X_test,y_train,y_test  = train_test_split(X_std,y,test_size=0.3,random_state=42)

clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy:", accuracy)

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

plt.figure(figsize=(10, 6))
sns.heatmap(pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).iloc[:-1, :].T, annot=True, cmap="YlGnBu")
plt.title('Classification Report')
plt.show()


plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap="YlGnBu")
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

