# -*- coding: utf-8 -*-
"""LVADSUSR170LOGISTIC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UeuuBsQWZ-8A5qWrzGXYhajDXTiSkeqc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score
from sklearn.metrics import classification_report, confusion_matrix, precision_score, recall_score, f1_score, accuracy_score
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder,StandardScaler

df=pd.read_csv('/content/booking.csv')

df

df.duplicated().sum()

df.info()

df.describe()

df.isnull().sum()

plt.bar(df['room type'].value_counts().index,df['room type'].value_counts().values)
plt.xticks(rotation=45)
plt.show()

df['room type']=df['room type'].fillna(df['room type'].mode())

plt.hist(df['average price'])
plt.show()

df['average price'].fillna(df['average price'].median(),inplace=True)

df[df['room type'].isnull()]

for i in df.select_dtypes([int,float]):
  plt.hist(df[i])
  plt.title(f'Histogram of {i}')
  plt.ylabel("Frequency")
  plt.show()

for i in df.select_dtypes([int,float]):
  plt.boxplot(df[i])
  plt.title(f'boxplot of {i}')
  plt.show()

numerical=df.select_dtypes([int,float])
q1=numerical.quantile(0.25)
q3=numerical.quantile(0.75)
iqr=q3-q1
lower=q1-1.5*iqr
upper=q3+1.5*iqr

outliers=df[df[numerical.columns]<lower]
outliers=outliers[outliers[numerical.columns]>upper]
df=df[~outliers.any(axis=1)]

correl_matrix=df[numerical.columns].corr()

sns.heatmap(correl_matrix,annot=True,fmt=".2f")
plt.show()

columns_to_encode=['room type','market segment type','type of meal']
for column in columns_to_encode:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])

x=df.drop(['booking status','Booking_ID','date of reservation'],axis=1)
y=df['booking status']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

scaler=StandardScaler()

x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)

model=LogisticRegression()

model.fit(x_train,y_train)

predicted=model.predict(x_test)

classification_report(y_test,predicted)

accuracy_score(y_test,predicted)

confusion_matrix(y_test,predicted)

y_test

predicted

