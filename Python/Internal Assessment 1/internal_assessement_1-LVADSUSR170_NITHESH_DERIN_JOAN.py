# -*- coding: utf-8 -*-
"""Internal_Assessement_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/100NIvKpZtxpgzHgW_pVyTdk-Te6vg2ZA
"""

#1.Commercial Property Management

length=float(input("Enter the Lenght of the area in meters: "))
width=float(input("Enter the Width of the area in meters: "))
area=length*width

if(area<200):
  print("Small")
elif(200<area<600):
  print("Medium")
else:
  print("Large")

#2.Integrated Health Management App

weight=float(input("Enter your weight: "))
height=float(input("Enter your height: "))
bmi=weight/height**2
if bmi<15:
  print("You are skinny you should eat more consider eating foods with more protein and fats. Also try contacting a dietitian")
elif bmi<=20:
  print("You are average. keep up the good work")
elif bmi<=25:
  print("You are overweight try cutting down carbs and go to gym and eat healthy items rich in protein")
else:
  print("You are in the obese category, this is very harmful to your health go and see a doctor and dietitian")

# 3. Educational Record System
def add_records(d,name,values):
    d[name]=values
    return d

def update_records(d,name,values):
  if name in d:
    d[name]=values
  else:
    print(f"The {name} is not in the database")
  return d

def retrieve_record(d,name):
  if name in d:
    return d[name]
  else:
    print(f"The {name} is not in the database")



d={}
while True:
  print("1.Add Record")
  print("2.Update Record")
  print("3.Retrieve Record")
  print("4.Exit")
  choice=input("Enter the Number ")
  if choice=='1':
    name=input("Enter the Name of the student")
    marks=input("Enter the Grades of the student in order")
    print(add_records(d,name,marks))

  elif choice=='2':
    name=input("Enter the Name of the student")
    marks=input("Enter the Grades of the student in order to be updated")
    print(update_records(d,name,marks))
  elif choice =='3':
    name=input("Enter the Name of the student")
    print(retrieve_record(d,name))
  else:
    break

# 4. Content Recomendation Engine:
ratings={
'PG-13':['Popeye',"Tom & Jerry",'Ben 10'],
'teen':['Leo','kaithi','vikram','Manjummel boys'],
'R':["Vitoria's Secrets", "The Apostle Diaries",'Documentry' ],
'senior':['World war 1',"World war 2",'Veterans of war']}
age=int(input("Enter your age "))
if age<=14:
  print('Shows available are',ratings['PG-13'])
elif age<=18:
  print("Shows availabe are",ratings['PG-13'],ratings['Teen'])
elif age<=45:
  print("Shows available are",ratings['R'],ratings["Teen"],ratings['Senior'])
else:
  print("Shows availabe are", ratings['senior'])

# 5. Promational Email Dispatcher

subscirber_id=[]
number=int(input("Enter the total number of id's to be created: "))
for i in range(0,len(number),2):
  subscriber_id.append(i)
print(subscriber_id)

# 6. Corporate Network Security System
password={'john doe':'john@2001'}

while True:
  uname=input("Enter your username ")
  psswd=input("Enter your password")

  if uname not in password:
    print('Username not in the data base')
    continue

  if password[uname]!=psswd:
    print('Password Mismatch. Try again!')
  else:
    print('Logged in Successfully')
    break

# 7. Customer feed back analysis tool

def avg_score(l):
  avg_score=sum(l)/len(l)

feedback=[]
num=int(input("Enter the number of feed backs "))
print("Enter the feedback score one by one")
for i in range(num):
  score=int(input())
  feedback.append(score)

mean_score=avg_score(feedback)

if mean_score<2.5:
  print("Feedback score very low have to do some changes look into all the things went wrong and read all the feedback")
elif mean_score<3.9:
  print("Its just ok not a good store you have to do more. Try doing something to improve")
else:
  print("You are doing a good job but never settle. Try to aim higher and improve than your previous version. Great job")

# 8. Content moderation system

l=['word','madam','nice','beautiful','wifaounenfiwifn']

for i in l:
  count=0
  for j in range(len(i)):
    if i[j]=='a' or i[j]=='e' or i[j]=='i' or i[j]=='o' or i[j]=='u':
      count=count+1
  if count>5:
    l.remove(i)

print(l)

# 9. Automated event Reminder:

#10. Robust financial Calculator

def loan_bal(loan_taken,amount_paid):
  try:
    return loan_taken-amount_paid
  except e:
    print("Check the numbers again")
  finally:
    print("Try again")

def interest_cal(principle,n,r):
  try:
    return (principle*n*r)/100
  except e:
    print("Check the numbers again")
  finally:
    print("Try again")


while True:
  print('1.Loan Repayment')
  print('2. Interest calculation')
  print('3. To exit')
  choice=int(input("Enter your choice "))


  if choice==1:
    loan_taken=int(input("Enter the loan amount taken"))
    amount_paid=int(input("Enter the amount paid"))
    print("Balance: ",loan_bal(loan_taken,amount_paid))
  elif choice==2:
    principle=int(input("Enter the principle"))
    n=int(input("Enter the number of years"))
    r=float("Enter the rate")
    print("Interest: ",interest_cal(principle,n,r))
  else:
    break

#11

#12 Scientific Data Processing tool

def division(numerator,denominator):
  try:
    return numerator/denominator
  except e:
    print("Divide by zero erro")
  finally:
    print("Check the Numbers")

numerator=int(input("Enter the numerator "))
denominator=int(input("Enter the denominator"))
print("Result: ",division(numerator,denominator))

#13
import time

#14. Review tool

with open("path to the file/ file name","r") as file_obj:
  content=file_obj.read()
  print(content)
file_obj.close()

#15. Dynamic content creation
with open("path to the file/ file name",'w') as  file_obj:
  file_obj.write("company news or stock information or industry news or all")
  print(file_obj.read())
file_obj.close()