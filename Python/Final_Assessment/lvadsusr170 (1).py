# -*- coding: utf-8 -*-
"""LVADSUSR170.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Z4cfM1VaMdvzSYu300nV0oWGvkfaQuq
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

#1
df=pd.read_csv('/content/Final Dataset - IPL.csv')
df.info()

df.describe()

df.shape
number_rows=df.shape[0]
number_cols=df.shape[1]
print('Rows ',number_rows)
print('Columns',number_cols)

print(df.isnull().sum())
print()
print("No missing values")

print("NUmerical Columns")
print(df.select_dtypes([int,float]).columns)

print("Categorical columns")
print(df.select_dtypes(object).columns)

#2
# A
print(df.isnull().sum())
print()
print('There are no missing values. if there are we can use statistics to replace them or drop them using dropna or fillna')
print()
#B
print(df.duplicated().sum())
print()
print("Ther are no duplicate values. if there are any we can drop them using df.drop_duplicates(inplace=True)")

#3
numerical=df.select_dtypes([int,float])
print("Mean")
print(numerical.mean())
print()
print("Mode")
print(numerical.mode().dropna())
print()
print("Median")
print(numerical.median())
print()
print("Range")
print(numerical.max()-numerical.min())
print()
print('Variance')
print(numerical.var())
print()
print('Standard Deviation')
print(numerical.std())

#4
df.head()

df.groupby('won_by').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

plt.figure(figsize=(12,6))
plt.boxplot(numerical,labels=numerical.columns)
plt.show()
print()
print("""From the above boxplot we see the outliers of all the numerical datas and
the median an ranges of the datasets""")

df.head()

match_winner=df['match_winner'].value_counts()

count=match_winner.values
label=match_winner.index

plt.pie(x=count,labels=label,autopct='%.2f%%')
plt.show()

df

df.groupby('venue').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

df

plt.figure(figsize=(2,2))
# plt.subplot(1,2,1)
df.plot(kind='scatter', x='first_ings_score', y='first_ings_wkts', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# plt.subplot(1,2,2)
df.plot(kind='scatter', x='second_ings_score', y='second_ings_wkts', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.show()

sns.histplot(df['highscore'],bins=5,kde=True)
plt.title("Distribution of High score")
plt.xlabel('Highscore')
plt.ylabel("Count")
plt.show()

#5
df.head(3)
correl_data=df[['first_ings_score','second_ings_score']]
a=df['first_ings_score']
b=df['second_ings_score']
sns.heatmap(correl_data,cmap='viridis')

team1_win=df[df['match_winner']==df['team1']]

team1_win['toss_winner'].valuecounts()

plt.bar(team1_win['toss_decision'].value_counts().index,team1_win['toss_decision'].value_counts().values)
plt.xlabel('Toss decision')
plt.title("Toss decision during win")
plt.show()

team1_not_win=df[df['match_winner']!=df['team1']]
plt.bar(team1_not_win['toss_decision'].value_counts().index,team1_not_win['toss_decision'].value_counts().values)
plt.xlabel('Toss decision')
plt.title('Toss decison during loss')
plt.show()

df.head()

df.head()

#6
plt.figure(figsize=(12,6))
plt.boxplot(numerical,labels=numerical.columns)
plt.show()
print()
print("""From the above boxplot we can see the outliers of all the numerical data in the datasets
 we cans see more outliers in margins. there are also outlier in highscore,second innings, first_innings
 . depending on the need we shoudl eradicate them. Here it is good to remove them in margins since its ver rare to get
 margins very high""")

from scipy.stats import zscore

z_score=zscore(df['margin'])

df[(df['margin']>3) | df['margin']<-3]

Q1 = numerical.quantile(0.25)
Q3 = numerical.quantile(0.75)
IQR = Q3 - Q1
outliers = numerical[(numerical< (Q1 - 1.5 * IQR)) | (numerical > (Q3 + 1.5 * IQR))]
print("we can also use IQR for this/")

print("zscore gives us the value between -3 and 3 . any values less than -3 are outliers and any valuesgreater than 3 are outliers")

#8.
print(df.groupby(['player_of_the_match']).size().sort_values(ascending=False).reset_index().iloc[0:5])
print()
print(df.groupby('best_bowling').size().sort_values(ascending=False).iloc[0:5])
print()
print('Kuldeeep Yadav has been the player of the match most of the times. and has been best bowler. so he must be a good player')

#7
team_1_won_data=df[(df['match_winner']==df['team1'])]

team_1_won_data.groupby('')

df.head()

df['stage'].value_counts()

plt.bar(df['stage'].value_counts().index,df['stage'].value_counts().values)
plt.xlabel('state')
plt.ylabel('count')
plt.show()

plt.bar(df['venue'].value_counts().index,df['venue'].value_counts().values)
plt.xticks(rotation=45)
plt.title("Venues with most wins")
plt.xlabel('venue')
plt.ylabel('count')

print('we can see the least preferred stadium is the narendra modi stadium in hyderabad.')

def team_1_win(df):
  if(df['mat']==df['team1']):
    return 1
  else:
    return 0

df['Team1win']=df.apply(team_1_win)

#9
print("""From the previous analysis it is evident that the player kuldeep yadav is the man of the match and a very good bowler. the venue chose is mumbai
could be because of its popularity, and the teams which take fielding first mostly wins compared to fielding and the state is mostly group state , not play off or final
it could be noted that the first innings and second innings are increasing wiht the correlations. Also the wickets are taken less in first innings but in second innings they are taken a lot.
the most winning temas and everything can be found here. It is noted that bangalore team has won more matches than any other teams

""")